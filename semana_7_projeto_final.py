# -*- coding: utf-8 -*-
"""semana_7_projeto_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kpjs_PadVU2pElSKxNFNu2NB8f53n-s3
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

housing = pd.read_csv('./sample_data/california_housing_train.csv') #dataset do Colab

"""#Análise Exploratória

Este conjunto de dados contém uma linha por grupo de blocos do censo. Um grupo de quarteirões é a menor unidade geográfica para a qual o U.S. Census Bureau publica dados de amostra (um grupo de quarteirões normalmente tem uma população de 600 a 3.000 pessoas).
"""

housing.head()

housing.describe(include='all')

!pip install sweetviz
import sweetviz

analise=sweetviz.analyze(housing)
analise.show_html()

"""##Mapa de calor (correlação de variáveis)"""

mask = np.triu(np.ones_like(housing.corr(), dtype=bool))
plt.figure(figsize=(10,8))
sns.heatmap(housing.corr(), mask=mask, square = True, annot=True, vmin=-1, vmax=1)
plt.show()

# Notar as correlações de median_income com median_house_value e também households com total_bedrooms

"""##Machine Learning

Como esse dataset é pré-pronto (usado em muitos exemplos de livros, sites, etc,) não há muito o que pré-processar dos dados.

"""

y=housing['median_house_value']
#y=housing.median_house_value
y

"""Escolher as features (váriveis a serem utilizadas do seu conjunto de dados)


"""

features=['longitude','latitude','housing_median_age','total_rooms','total_bedrooms','population','households','median_income']

X=housing[features]

X

"""
Construindo o modelo"""

from sklearn.neighbors import KNeighborsRegressor

modelo = KNeighborsRegressor(7)

"""Treinar o modelo"""

modelo.fit(X,y)

housing.head(5)

X.head(5)

"""Fazer a predição"""

modelo.predict(X.head(5))

"""Validar o modelo<br>
erro=atual - previsao (achar a diferença)
"""

from sklearn.metrics import mean_absolute_error

predicao=modelo.predict(X)

predicao

mean_absolute_error(y,predicao)

"""Colocando em um dataframe (valor esperado e predição)"""

housing2=pd.DataFrame(y)

housing2['predicao']=predicao

housing2.sample(10)

housing2.describe()

"""Validação """

from sklearn.model_selection import train_test_split

treino_X, val_X, treino_y, val_y = train_test_split(X,y,random_state=1,train_size=0.8) # treino -> 80%; teste -> 20%

treino_X.shape

modelo2 = KNeighborsRegressor(3)

modelo2.fit(treino_X,treino_y)

predicao2=modelo2.predict(val_X)

"""Analisar o erro (ver outros números de vizinhos)"""

mean_absolute_error(val_y,predicao2)

"""Usando Árvores de Decisão (outro tipo de algoritmo)"""

from sklearn.tree import DecisionTreeRegressor

modelotree=DecisionTreeRegressor(random_state=1,max_depth=8)
#modelotree=DecisionTreeRegressor(random_state=1,min_samples_leaf=15)

modelotree.fit(X,y)

predicaotree=modelotree.predict(X)

mean_absolute_error(y,predicaotree)

"""Separando treino e teste"""

modelotree.fit(treino_X, treino_y)

predicao=modelotree.predict(val_X)

mean_absolute_error(val_y,predicao)

"""Usando Random Forest"""

from sklearn.ensemble import RandomForestRegressor

modelorf=RandomForestRegressor(random_state=1,n_jobs=-1,n_estimators=500)

modelorf.fit(treino_X, treino_y)

predicao=modelorf.predict(val_X)

mean_absolute_error(val_y,predicao)